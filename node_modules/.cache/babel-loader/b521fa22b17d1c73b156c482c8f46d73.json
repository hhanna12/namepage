{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/hanna/Desktop/YLIOPISTO/solita/namepage/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport namedb from './names';\n/*\njostain syystä returnin li-elementti ei päivitä listaa.\n clogilla se kuitenkin toimii\n*/\n\nconst Buttons = ({\n  amountOrder,\n  toAlphabeticOrder\n}) => {\n  console.log('buttons');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: amountOrder,\n      children: \"Amount order\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toAlphabeticOrder,\n      children: \"Alphabetical order\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Buttons;\n\nconst Datarow = ({\n  person\n}) => {\n  console.log('datarow');\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    children: [person.name, \" \", person.amount]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n};\n\n_c2 = Datarow;\n\nconst Total = props => {\n  //return the length of the props list\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Total amount of all names \", props.orderedList.length]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n};\n\n_c3 = Total;\n\nconst Search = ({\n  searchName\n}) => {\n  //<button onClick={searchName}>Search</button>\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: searchName,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n\n_c4 = Search;\n\nconst App = () => {\n  _s();\n\n  const nameList = namedb.names;\n  const [orderedList, setOrderedList] = useState(nameList);\n  const [searchedName, setSearchedName] = useState('');\n  const [printName, setPrintName] = useState('');\n\n  const amountOrder = () => {\n    setOrderedList([]);\n    /* sorting list of name+amount objects by amount. \n     * b.amount is the amount number. \n     * a.amount > b.amount returns boolean\n     * then the sort function check if that's true or false and orders the objects.\n     */\n\n    const sortedAmount = nameList.sort((a, b) => a.amount > b.amount ? 1 : -1);\n    setOrderedList(sortedAmount);\n  };\n\n  const toAlphabeticOrder = () => {\n    setOrderedList([]);\n    const sortedNames = nameList.sort((a, b) => a.name > b.name ? 1 : -1);\n    setOrderedList(sortedNames);\n  };\n\n  const searchName = event => {\n    console.log('searc namessa', searchedName);\n    event.preventDefault();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: orderedList.filter(function (p) {\n          console.log('pname', p.name, 'searchedName ', searchedName);\n\n          if (p.name === searchedName) {\n            return setPrintName(p.name);\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this);\n  };\n\n  const changeHandler = event => {\n    setSearchedName(event.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: amountOrder,\n      children: \"Amount order\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toAlphabeticOrder,\n      children: \"Alphabetical order\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: orderedList.map((person, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [person.name, \" \", person.amount]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Total, {\n        orderedList: orderedList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: changeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Search, {\n      searchName: searchName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 9\n  }, this);\n};\n\n_s(App, \"/YgnYQyrOKCPChOo5Xs8kVudMR4=\");\n\n_c5 = App;\nexport default App;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"Buttons\");\n$RefreshReg$(_c2, \"Datarow\");\n$RefreshReg$(_c3, \"Total\");\n$RefreshReg$(_c4, \"Search\");\n$RefreshReg$(_c5, \"App\");","map":{"version":3,"sources":["/Users/hanna/Desktop/YLIOPISTO/solita/namepage/src/App.js"],"names":["React","useState","namedb","Buttons","amountOrder","toAlphabeticOrder","console","log","Datarow","person","name","amount","Total","props","orderedList","length","Search","searchName","App","nameList","names","setOrderedList","searchedName","setSearchedName","printName","setPrintName","sortedAmount","sort","a","b","sortedNames","event","preventDefault","filter","p","changeHandler","target","value","map","index"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport namedb from './names'\n\n/*\njostain syystä returnin li-elementti ei päivitä listaa.\n clogilla se kuitenkin toimii\n*/\n\nconst Buttons = ({ amountOrder, toAlphabeticOrder }) => {\n    console.log('buttons')\n    return (\n        <div>\n            <button onClick={amountOrder}>Amount order</button>\n            <button onClick={toAlphabeticOrder}>Alphabetical order</button>\n        </div>\n    )\n}\nconst Datarow = ({ person }) => {\n    console.log('datarow')\n    return (\n        <li>\n            {person.name} {person.amount}\n        </li>\n    )\n}\nconst Total = (props) => {\n    //return the length of the props list\n    return (\n        <div>\n            Total amount of all names {props.orderedList.length}\n        </div>\n        )\n}\n\n\nconst Search = ({ searchName }) => {\n    //<button onClick={searchName}>Search</button>\n\n    return(\n        <form onSubmit={searchName}>\n            <div>\n                <button type='submit'>Search</button>\n            </div>\n\n        </form>\n    )\n}\nconst App = () => {\n    const nameList = namedb.names\n    const [ orderedList, setOrderedList ] = useState(nameList)\n    const [ searchedName, setSearchedName ] = useState('')\n    const [ printName, setPrintName ] = useState('')\n    \n    const amountOrder = () => {\n        setOrderedList([])\n        /* sorting list of name+amount objects by amount. \n         * b.amount is the amount number. \n         * a.amount > b.amount returns boolean\n         * then the sort function check if that's true or false and orders the objects.\n         */\n         \n        const sortedAmount = nameList.sort((a, b) => (\n            a.amount > b.amount ? 1 : -1\n        )) \n        setOrderedList(sortedAmount)\n    }\n    const toAlphabeticOrder = () => {\n        setOrderedList([])\n        const sortedNames = nameList.sort((a, b) => (\n            a.name > b.name ? 1 : -1\n        )) \n        setOrderedList(sortedNames)\n    }\n\n    const searchName = (event) => {\n        console.log('searc namessa', searchedName)\n        event.preventDefault()\n        return (\n            <div>\n                <ul>\n                {orderedList.filter(function(p){\n                    console.log('pname', p.name, 'searchedName ', searchedName)   \n                    if(p.name === searchedName){\n                        return setPrintName(p.name)\n                    }\n                })}\n                </ul>\n            </div>\n        )\n    }\n\n    const changeHandler = (event) => {\n        setSearchedName(event.target.value)\n    }\n\n    return (\n        <div>\n            <button onClick={amountOrder}>Amount order</button>\n            <button onClick={toAlphabeticOrder}>Alphabetical order</button>\n            <ul>\n                {orderedList.map((person, index) => \n                    <li key={index}>\n                        {person.name} {person.amount}\n                    </li>\n                )}\n            </ul>\n            <div>\n                <Total orderedList={orderedList}/>\n            </div>\n            <div>\n            <input onChange={changeHandler}/>\n            </div>\n            \n            <Search searchName={searchName} />\n        </div>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}