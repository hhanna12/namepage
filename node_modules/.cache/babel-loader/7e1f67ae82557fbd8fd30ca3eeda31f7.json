{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/hanna/Desktop/YLIOPISTO/solita/namepage/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport namedb from './names';\n/*\njostain syystä returnin li-elementti ei päivitä listaa.\n clogilla se kuitenkin toimii\n*/\n\nconst Buttons = ({\n  amountOrder,\n  toAlphabeticOrder\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: amountOrder,\n      children: \"Amount order\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toAlphabeticOrder,\n      children: \"Alphabetical order\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Buttons;\n\nconst Datarow = ({\n  person\n}) => {\n  console.log('datarow');\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    children: [person.name, \" \", person.amount]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n};\n\n_c2 = Datarow;\n\nconst App = () => {\n  _s();\n\n  const nameList = namedb.names;\n  const [orderedList, setOrderedList] = useState([]);\n\n  const amountOrder = () => {\n    setOrderedList([]);\n    /* sorting list of name+amount objects by amount. \n     * b.amount is the amount number. \n     * a.amount > b.amount returns boolean\n     * then the sort function check if that's true or false and orders the objects.\n     */\n\n    const sortedAmount = nameList.sort((a, b) => a.amount > b.amount ? 1 : -1);\n    setOrderedList(sortedAmount);\n  };\n\n  const toAlphabeticOrder = () => {\n    setOrderedList([]);\n    const orderedNames = nameList.sort((a, b) => a.name > b.name ? 1 : -1);\n    setOrderedList(orderedNames);\n  };\n\n  console.log('toka lopullinen', orderedList);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Buttons, {\n      amountOrder: amountOrder,\n      toAlphabeticOrder: toAlphabeticOrder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: orderedList.map((person, index) => /*#__PURE__*/_jsxDEV(Datarow, {\n        person: person\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n};\n\n_s(App, \"Q1QJOpv1jMe+XKBYhj7x9PS+mQU=\");\n\n_c3 = App;\nexport default App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Buttons\");\n$RefreshReg$(_c2, \"Datarow\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"sources":["/Users/hanna/Desktop/YLIOPISTO/solita/namepage/src/App.js"],"names":["React","useState","namedb","Buttons","amountOrder","toAlphabeticOrder","Datarow","person","console","log","name","amount","App","nameList","names","orderedList","setOrderedList","sortedAmount","sort","a","b","orderedNames","map","index"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,SAAnB;AAEA;AACA;AACA;AACA;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA,WAAF;AAAeC,EAAAA;AAAf,CAAD,KAAwC;AACpD,sBACI;AAAA,4BACI;AAAQ,MAAA,OAAO,EAAED,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAQ,MAAA,OAAO,EAAEC,iBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,CAPD;;KAAMF,O;;AASN,MAAMG,OAAO,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAgB;AAC5BC,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA,sBACI;AAAA,eACKF,MAAM,CAACG,IADZ,OACmBH,MAAM,CAACI,MAD1B;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAPD;;MAAML,O;;AASN,MAAMM,GAAG,GAAG,MAAM;AAAA;;AACd,QAAMC,QAAQ,GAAGX,MAAM,CAACY,KAAxB;AACA,QAAM,CAAEC,WAAF,EAAeC,cAAf,IAAkCf,QAAQ,CAAC,EAAD,CAAhD;;AAEA,QAAMG,WAAW,GAAG,MAAM;AACxBY,IAAAA,cAAc,CAAC,EAAD,CAAd;AAEE;AACR;AACA;AACA;AACA;;AAEQ,UAAMC,YAAY,GAAGJ,QAAQ,CAACK,IAAT,CAAc,CAACC,CAAD,EAAIC,CAAJ,KAC/BD,CAAC,CAACR,MAAF,GAAWS,CAAC,CAACT,MAAb,GAAsB,CAAtB,GAA0B,CAAC,CADV,CAArB;AAGAK,IAAAA,cAAc,CAACC,YAAD,CAAd;AACH,GAbD;;AAeA,QAAMZ,iBAAiB,GAAG,MAAM;AAC9BW,IAAAA,cAAc,CAAC,EAAD,CAAd;AACE,UAAMK,YAAY,GAAGR,QAAQ,CAACK,IAAT,CAAc,CAACC,CAAD,EAAIC,CAAJ,KAC/BD,CAAC,CAACT,IAAF,GAASU,CAAC,CAACV,IAAX,GAAkB,CAAlB,GAAsB,CAAC,CADN,CAArB;AAGAM,IAAAA,cAAc,CAACK,YAAD,CAAd;AACH,GAND;;AAQAb,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BM,WAA/B;AACA,sBACI;AAAA,4BACI,QAAC,OAAD;AAAS,MAAA,WAAW,EAAEX,WAAtB;AACI,MAAA,iBAAiB,EAAEC;AADvB;AAAA;AAAA;AAAA;AAAA,YADJ,eAGI;AAAA,gBACKU,WAAW,CAACO,GAAZ,CAAgB,CAACf,MAAD,EAASgB,KAAT,kBACb,QAAC,OAAD;AAAqB,QAAA,MAAM,EAAEhB;AAA7B,SAAcgB,KAAd;AAAA;AAAA;AAAA;AAAA,cADH;AADL;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH,CAvCD;;GAAMX,G;;MAAAA,G;AAyCN,eAAeA,GAAf","sourcesContent":["import React, { useState } from 'react'\nimport namedb from './names'\n\n/*\njostain syystä returnin li-elementti ei päivitä listaa.\n clogilla se kuitenkin toimii\n*/\n\nconst Buttons = ({ amountOrder, toAlphabeticOrder }) => {\n    return (\n        <div>\n            <button onClick={amountOrder}>Amount order</button>\n            <button onClick={toAlphabeticOrder}>Alphabetical order</button>\n        </div>\n    )\n}\n\nconst Datarow = ({ person }) => {\n    console.log('datarow')\n    return (\n        <li>\n            {person.name} {person.amount}\n        </li>\n    )\n}\n\nconst App = () => {\n    const nameList = namedb.names\n    const [ orderedList, setOrderedList ] = useState([]) \n\n    const amountOrder = () => {\n      setOrderedList([])\n\n        /* sorting list of name+amount objects by amount. \n         * b.amount is the amount number. \n         * a.amount > b.amount returns boolean\n         * then the sort function check if that's true or false and orders the objects.\n         */\n         \n        const sortedAmount = nameList.sort((a, b) => (\n            a.amount > b.amount ? 1 : -1\n        )) \n        setOrderedList(sortedAmount)\n    }\n\n    const toAlphabeticOrder = () => {\n      setOrderedList([])\n        const orderedNames = nameList.sort((a, b) => (\n            a.name > b.name ? 1 : -1\n        )) \n        setOrderedList(orderedNames)\n    }\n\n    console.log('toka lopullinen', orderedList)\n    return (\n        <div>\n            <Buttons amountOrder={amountOrder}\n                toAlphabeticOrder={toAlphabeticOrder}/>\n            <ul>\n                {orderedList.map((person, index) => \n                    <Datarow key={index} person={person}/>\n                )}\n            </ul>\n        </div>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}